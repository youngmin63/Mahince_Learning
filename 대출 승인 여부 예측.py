# -*- coding: utf-8 -*-
"""1Final_credit_Template_권영민_202215053.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lbBBcNgl2yGJ2BlGaWVpAXkgIgVZkyg9

# 💳 대출 승인 여부 예측(Loan Approval Status Prediction)
목적: 대출 신청자의 특성 정보를 기반으로 연체 여부(0/1)를 예측하는 분류 모델 구축

#### 1. 데이터 전처리
- 불필요한 컬럼 제거 (예: `Unnamed: 0`)
- **결측치 처리**
  - `Saving accounts`, `Checking account` 등 결측치 있는 변수에 대한 처리 방법 제시
- **범주형 변수 인코딩**
  - `Sex`, `Housing`, `Purpose`, `Saving accounts`, `Checking account` 등
- **연속형 변수 스케일링**
  - `Age`, `Credit amount`, `Duration` 등을 `StandardScaler` 등으로 정규화
- **X와 y 분할**
  - `Creditability`를 타깃 변수(y)로 설정, 나머지를 X로 구성

#### 2. 모델링 및 성능 평가
- `train_test_split`을 통한 데이터 분할
- 로지스틱 회귀 등 분류 모델 학습
- 정확도(`Accuracy`), 재현율(`Recall`), 정밀도(`Precision`), F1-score 등 평가 지표 출력
- 혼동 행렬 시각화

#### 3. 변수 중요도 시각화
- 로지스틱 회귀 계수 또는 트리 모델의 `feature_importances_` 시각화
- 대출 승인에 영향을 미친 주요 변수 해석

#### 4. 결과 해석
- 대출 승인에 영향을 미친 주요 요인은?
  - 예: `Credit amount`, `Duration`, `Checking account` 등
- 신용도가 낮은(= bad creditability) 고객의 주요 특성은?
- 성별, 나이, 목적 등 변수에 따라 대출 승인 경향이 어떻게 달라지는가?

### ✅ 변수 설명 (German Credit Data 기준)

| 변수명 | 설명 |
|--------|------|
| `Age` | 고객의 나이 |
| `Sex` | 성별 (male/female) |
| `Job` | 직업 구분 (0~3: 숫자가 클수록 안정적인 직업) |
| `Housing` | 주거 형태 (own: 자가, rent: 임대, free: 무상 거주) |
| `Saving accounts` | 저축 계좌 잔고 수준 (little, moderate, quite rich 등) |
| `Checking account` | 당좌예금 계좌 상태 (none, little, moderate 등) |
| `Credit amount` | 대출 신청 금액 |
| `Duration` | 대출 상환 기간 (개월 수) |
| `Purpose` | 대출 목적 (car, furniture/equipment, education 등) |
| `Creditability` | 대출 승인 여부(good: 승인, bad: 거절) |
"""

# 📦 라이브러리 불러오기
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay, roc_auc_score, roc_curve

# 📥 데이터 불러오기
df = pd.read_csv('german_credit.csv')  # 예: Kaggle German Credit Data
df.head()

# 🔍 EDA & 결측치 확인
print(df.info())
print(df.describe())
sns.countplot(x='Creditability', data=df)

# 전처리

# Unnamed: 0 컬럼 제거
# 분석에 필요 없는 인덱스용 컬럼이므로 제거
df = df.drop(columns=["Unnamed: 0"])

# 결측치 처리
# Saving accounts와 Checking account는 결측이 많으나, 결측 자체도 하나의 의미일 수 있으므로 'missing'으로 대체
df["Saving accounts"] = df["Saving accounts"].fillna("missing")
df["Checking account"] = df["Checking account"].fillna("missing")

# 범주형 변수 인코딩 (OneHotEncoding)
# 문자열 범주는 머신러닝 모델이 이해할 수 없기 때문에 수치형으로 변환
# drop_first=True를 통해 더미 변수 함정(dummy variable trap) 방지
categorical_cols = ["Sex", "Housing", "Saving accounts", "Checking account", "Purpose"]
df_encoded = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

# 타깃 변수 이진화
# Creditability를 'good' → 1, 'bad' → 0으로 매핑하여 이진 분류 문제로 설정
df_encoded["Creditability"] = df_encoded["Creditability"].map({"good": 1, "bad": 0})

# 수치형 변수 스케일링
# 연속형 변수들 간 스케일 차이를 줄이기 위해 StandardScaler 사용
scale_cols = ["Age", "Credit amount", "Duration"]
scaler = StandardScaler()
df_encoded[scale_cols] = scaler.fit_transform(df_encoded[scale_cols])

# X, y 분리
X = df_encoded.drop("Creditability", axis=1)
y = df_encoded["Creditability"]

# 학습/테스트 데이터 분할
# stratify=y를 사용해 학습/테스트 세트 간 클래스 비율 유지
# random_state 고정으로 재현 가능성 확보
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 결과 확인
print("전처리 완료")
print(f"Train: {X_train.shape}, Test: {X_test.shape}")

# 모델 학습
# Logistic Regression은 변수의 영향력을 계수로 해석할 수 있어 금융 분야에서 자주 사용됨
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# 예측 수행
y_pred = model.predict(X_test)               # 클래스 예측 (0 또는 1)
y_proba = model.predict_proba(X_test)[:, 1]  # 클래스 1일 확률 예측

# 분류 성능 평가
print("Classification Report")
print(classification_report(y_test, y_pred, target_names=["bad (0)", "good (1)"]))

# 혼동 행렬 시각화
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["bad (0)", "good (1)"])
disp.plot(cmap='Blues')
plt.title("Confusion Matrix")
plt.show()

# ROC AUC 점수 및 곡선
auc = roc_auc_score(y_test, y_proba)
fpr, tpr, thresholds = roc_curve(y_test, y_proba)

plt.figure()
plt.plot(fpr, tpr, label=f"ROC Curve (AUC = {auc:.2f})")
plt.plot([0, 1], [0, 1], 'k--')  # 대각선 기준선
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve - Logistic Regression")
plt.legend()
plt.grid()
plt.show()

"""## 🧠 모델 훈련: Logistic Regression

- **선택 이유**:
  - 금융 도메인에서는 해석 가능한 모델이 중요하며, Logistic Regression은 각 변수의 영향력을 계수로 해석할 수 있음
  - 이진 분류 문제에 적합하며, 베이스라인 모델로 자주 사용됨

## 📊 성능 평가 및 해석

- **정확도 (Accuracy)**: 전체 예측 중 올바른 비율
- **정밀도 (Precision)**: `good`으로 예측한 것 중 실제 `good`인 비율
- **재현율 (Recall)**: 실제 `good` 중 모델이 잘 맞춘 비율 → **신용도 높은 고객을 놓치지 않는 것이 중요**할 경우, recall이 중요
- **F1 Score**: Precision과 Recall의 조화 평균
- **ROC AUC**: 전체 분류 성능을 평가하는 통합 지표

- **Confusion Matrix**를 통해 잘못 예측한 패턴을 시각적으로 파악 가능
- **ROC Curve**는 threshold 변경에 따른 민감도와 특이도 간 trade-off를 보여줌
"""

# 변수 이름과 회귀 계수 추출
feature_names = X.columns
coefficients = model.coef_[0]  # Logistic Regression의 계수

# 절대값 기준으로 가장 영향력 큰 변수 순 정렬
coef_df = pd.DataFrame({
    "Feature": feature_names,
    "Coefficient": coefficients,
    "AbsValue": np.abs(coefficients)
}).sort_values(by="AbsValue", ascending=False)

# 시각화
plt.figure(figsize=(10, 6))
sns.barplot(x="Coefficient", y="Feature", data=coef_df.head(15), palette="coolwarm")
plt.title("🔍 Logistic Regression - 변수 중요도 상위 15개")
plt.xlabel("회귀 계수 (양/음에 따라 영향 방향 다름)")
plt.ylabel("변수명")
plt.grid(True)
plt.tight_layout()
plt.show()

"""## 📌 변수 중요도 해석 (Logistic Regression 기준)

- 회귀 계수가 **양수**인 변수는 `Creditability = good`에 **긍정적인 영향**을 주는 변수
- 회귀 계수가 **음수**인 변수는 `Creditability = bad` (연체 위험)에 영향을 미치는 변수
- 계수의 **절대값**이 클수록 모델에 미치는 영향력이 큼

예시 해석:
- `Duration`이 높을수록 연체 가능성이 증가 → 음의 계수
- `Checking account_missing`이 양의 계수라면, Checking 계좌 정보가 없을수록 오히려 신용도가 좋게 판단된 것일 수도 있음 (데이터셋 특이성 반영 필요)

# **📝 결과 해석 및 시사점**

# 1. 연체 여부 예측에 기여한 주요 변수

Logistic Regression 계수를 기준으로 연체 여부에 가장 영향을 준 변수들은 다음과 같음:

Duration: 대출 상환 기간이 길수록 연체 위험이 증가

Credit amount: 대출 금액이 클수록 연체 위험이 약간 증가

Checking account_none 또는 Saving accounts_missing: 금융 거래 기록이 부족한 경우 연체 가능성이 높게 예측됨

Purpose_education, Purpose_business: 특정 대출 목적이 연체와 연관


즉, 상환 능력을 직접적으로 반영하는 변수(예: 상환 기간, 금액, 계좌 기록 유무)가 신용도를 판단하는 데 핵심 역할을 함.



# **2. 금융 문맥에서 중요한 성능 지표: Recall **

Recall	실제 연체자 중에 얼마나 많이 맞췄는가	 중요! → 리스크 관리의 핵심
Precision	예측한 연체자 중 실제 연체 비율	중요하지만 recall보단 덜 중요

금융에서는 연체자를 놓치지 않는 것(False Negative 방지)이 가장 중요

연체자에게 대출을 승인하면 금전적 손실로 직결되기 때문

따라서 Recall이 Precision보다 더 중요한 지표로 간주됨



# 3. 향후 개선 방향 제안

1.데이터 보강:

현재 데이터는 일부 범주형 변수에 결측치가 많고, 연체 여부의 분포도 단순함

추가적인 사용자 정보(예: 소득, 신용등급, 과거 대출 이력 등) 확보 시 성능 향상 가능

2.다양한 모델 적용 및 비교:

현재는 Logistic Regression 단일 모델만 사용

향후에는 Random Forest, XGBoost 등 다양한 분류기를 적용해 성능 비교 가능

3.SMOTE 등 불균형 처리 적용:

연체자 비율이 낮은 경우, SMOTE, 언더샘플링 등으로 클래스 균형 맞추면 성능 개선 가능

4.비정형 데이터 활용:

로그 데이터, 텍스트 코멘트 등도 포함시킬 경우 실무 활용성 증가



**<마무리 요약>**

연체 예측에는 금융 정보의 유무(Checking/Saving account)와 상환 기간(Duration)이 특히 중요

Recall 중심의 평가 기준이 금융 리스크 최소화에 적합

향후에는 모델 다양화, 데이터 확장, 비정형 데이터 연계 등을 통해 고도화 가능
"""



